// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("numeric(10,7)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("numeric(10,7)")
                        .HasColumnName("longitude");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("street");

                    b.Property<string>("UniqueAddressHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("unique_address_hash");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id");

                    b.HasIndex("UniqueAddressHash")
                        .IsUnique()
                        .HasDatabaseName("ux_addresses_unique_address_hash");

                    b.HasIndex("ZipCode")
                        .HasDatabaseName("ix_addresses_zip_code");

                    b.HasIndex("City", "State")
                        .HasDatabaseName("ix_addresses_city_state");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_address_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_activity_date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ContactAddressId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_email");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_customers_status");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_path");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("file_type");

                    b.Property<int?>("InstallationId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.Property<int>("UploadedByUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_documents_customer_id");

                    b.HasIndex("InstallationId")
                        .HasDatabaseName("ix_documents_installation_id");

                    b.HasIndex("TicketId")
                        .HasDatabaseName("ix_documents_ticket_id");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_documents_type");

                    b.HasIndex("UploadedAt")
                        .HasDatabaseName("ix_documents_uploaded_at");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.EnergyProduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualProductionKwh")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("actual_production_kwh");

                    b.Property<decimal>("ExpectedProductionKwh")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("expected_production_kwh");

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("health_status");

                    b.Property<int>("InstallationId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateOnly>("ProductionDate")
                        .HasColumnType("date")
                        .HasColumnName("production_date");

                    b.Property<int?>("WeatherDataId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InstallationId")
                        .HasDatabaseName("ix_energy_production_installation_id");

                    b.HasIndex("ProductionDate")
                        .HasDatabaseName("ix_energy_production_date");

                    b.HasIndex("WeatherDataId");

                    b.HasIndex("InstallationId", "ProductionDate")
                        .IsUnique()
                        .HasDatabaseName("ix_energy_production_installation_date");

                    b.ToTable("energy_production", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("cost");

                    b.Property<int?>("InstallationId")
                        .HasColumnType("integer");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("manufacturer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("model");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("purchase_date");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("serial_number");

                    b.Property<string>("Specifications")
                        .HasColumnType("jsonb")
                        .HasColumnName("specifications");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("WarrantyExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("warranty_expiry_date");

                    b.HasKey("Id");

                    b.HasIndex("InstallationId")
                        .HasDatabaseName("ix_equipment_installation_id");

                    b.HasIndex("SerialNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_equipment_serial_number");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_equipment_status");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_equipment_type");

                    b.ToTable("equipment", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Installation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completion_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int>("InstallationAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("installation_address_id");

                    b.Property<string>("InverterType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("inverter_type");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("PanelCount")
                        .HasColumnType("integer")
                        .HasColumnName("panel_count");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("project_name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("SystemSizeKw")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("system_size_kw");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_installations_customer_id");

                    b.HasIndex("InstallationAddressId");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_installations_status");

                    b.HasIndex("Status", "StartDate")
                        .HasDatabaseName("ix_installations_status_start_date");

                    b.ToTable("installations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.InstallationStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<int>("ChangedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("FromStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("from_status");

                    b.Property<int>("InstallationId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("ToStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("to_status");

                    b.HasKey("Id");

                    b.HasIndex("ChangedAt")
                        .HasDatabaseName("ix_installation_status_history_changed_at");

                    b.HasIndex("ChangedByUserId");

                    b.HasIndex("InstallationId")
                        .HasDatabaseName("ix_installation_status_history_installation_id");

                    b.HasIndex("InstallationId", "ChangedAt")
                        .HasDatabaseName("ix_installation_status_history_installation_changed");

                    b.ToTable("installation_status_history", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.InstallationTechnician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_date");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_date");

                    b.Property<int>("InstallationId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Role")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("role");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InstallationId")
                        .HasDatabaseName("ix_installation_technicians_installation_id");

                    b.HasIndex("TechnicianId")
                        .HasDatabaseName("ix_installation_technicians_technician_id");

                    b.HasIndex("InstallationId", "TechnicianId")
                        .HasDatabaseName("ix_installation_technicians_installation_technician");

                    b.ToTable("installation_technicians", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Lead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<string>("BestTimeToContact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("best_time_to_contact");

                    b.Property<DateTime?>("ContactedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("contacted_at");

                    b.Property<DateTime?>("ConvertedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("converted_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsPropertyOwner")
                        .HasColumnType("boolean")
                        .HasColumnName("is_property_owner");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("MonthlyBillRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("monthly_bill_range");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("property_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_leads_created_at");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_leads_customer_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_leads_status");

                    b.HasIndex("Status", "CreatedAt")
                        .HasDatabaseName("ix_leads_status_created_at");

                    b.ToTable("leads", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SupportTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<int?>("AssignedToUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("InstallationId")
                        .HasColumnType("integer");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("priority");

                    b.Property<string>("ResolutionNotes")
                        .HasColumnType("text")
                        .HasColumnName("resolution_notes");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("resolved_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId")
                        .HasDatabaseName("ix_support_tickets_assigned_to_user_id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_support_tickets_created_at");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_support_tickets_customer_id");

                    b.HasIndex("InstallationId");

                    b.HasIndex("Priority")
                        .HasDatabaseName("ix_support_tickets_priority");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_support_tickets_status");

                    b.ToTable("support_tickets", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("license_number");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("specialization");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_users_is_active");

                    b.HasIndex("Role")
                        .HasDatabaseName("ix_users_role");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.WeatherData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CloudCoverPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("cloud_cover_percentage");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("condition");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("location");

                    b.Property<decimal>("TemperatureCelsius")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("temperature_celsius");

                    b.HasKey("Id");

                    b.HasIndex("Date", "Location")
                        .IsUnique()
                        .HasDatabaseName("ix_weather_data_date_location");

                    b.ToTable("weather_data", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.HasOne("Domain.Entities.Address", "ContactAddress")
                        .WithMany()
                        .HasForeignKey("ContactAddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ContactAddress");
                });

            modelBuilder.Entity("Domain.Entities.Document", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Documents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Installation", "Installation")
                        .WithMany("Documents")
                        .HasForeignKey("InstallationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.SupportTicket", "Ticket")
                        .WithMany("Documents")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Installation");

                    b.Navigation("Ticket");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("Domain.Entities.EnergyProduction", b =>
                {
                    b.HasOne("Domain.Entities.Installation", "Installation")
                        .WithMany("EnergyProductions")
                        .HasForeignKey("InstallationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WeatherData", "WeatherData")
                        .WithMany()
                        .HasForeignKey("WeatherDataId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Installation");

                    b.Navigation("WeatherData");
                });

            modelBuilder.Entity("Domain.Entities.Equipment", b =>
                {
                    b.HasOne("Domain.Entities.Installation", "Installation")
                        .WithMany("Equipment")
                        .HasForeignKey("InstallationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Installation");
                });

            modelBuilder.Entity("Domain.Entities.Installation", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Installations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Address", "InstallationAddress")
                        .WithMany()
                        .HasForeignKey("InstallationAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("InstallationAddress");
                });

            modelBuilder.Entity("Domain.Entities.InstallationStatusHistory", b =>
                {
                    b.HasOne("Domain.Entities.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Installation", "Installation")
                        .WithMany("StatusHistory")
                        .HasForeignKey("InstallationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedBy");

                    b.Navigation("Installation");
                });

            modelBuilder.Entity("Domain.Entities.InstallationTechnician", b =>
                {
                    b.HasOne("Domain.Entities.Installation", "Installation")
                        .WithMany("AssignedTechnicians")
                        .HasForeignKey("InstallationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Technician")
                        .WithMany("AssignedInstallations")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Installation");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Domain.Entities.Lead", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.SupportTicket", b =>
                {
                    b.HasOne("Domain.Entities.User", "AssignedTo")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("SupportTickets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Installation", "Installation")
                        .WithMany()
                        .HasForeignKey("InstallationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedTo");

                    b.Navigation("Customer");

                    b.Navigation("Installation");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Installations");

                    b.Navigation("SupportTickets");
                });

            modelBuilder.Entity("Domain.Entities.Installation", b =>
                {
                    b.Navigation("AssignedTechnicians");

                    b.Navigation("Documents");

                    b.Navigation("EnergyProductions");

                    b.Navigation("Equipment");

                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("Domain.Entities.SupportTicket", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("AssignedInstallations");

                    b.Navigation("AssignedTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
